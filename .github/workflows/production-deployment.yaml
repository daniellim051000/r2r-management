name: Production Backend Deployment

on:
  push:
    branches: ["master"]
  workflow_dispatch:

env:
  AZURE_CONTAINER_REGISTRY: "rtoro"
  RESOURCE_GROUP: "r2r"
  CLUSTER_NAME: "r2r-cluster"
  DEPLOYMENT_MANIFEST_PATH: "deployment"
  ENVIRONMENT: "production"
  CONTAINER_NAME: "r2r_web"

jobs:
  buildImage:
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    environment: 'production'
    steps:
      # Checks out the repository this file is in
      - uses: actions/checkout@v4

      # Create .env from github secrets
      - name: Creating Backend Environment
        run: |
          echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}" > r2r-management/.env
          echo "AZURE_CONNECTION_STRING=${{ secrets.AZURE_CONNECTION_STRING }}" >> r2r-management/.env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> r2r-management/.env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> r2r-management/.env

          echo "POSTGRES_USER=${{ vars.POSTGRES_USER }}" >> r2r-management/.env
          echo "POSTGRES_DB=${{ vars.POSTGRES_DB }}" >> r2r-management/.env
          echo "DB_HOST=${{ vars.DB_HOST }}" >> r2r-management/.env
          echo "DB_PORT=${{ vars.DB_PORT }}" >> r2r-management/.env
          echo "DEBUG=${{ vars.DEBUG }}" >> r2r-management/.env
          echo "USE_AZURE_STORAGE=${{ vars.USE_AZURE }}" >> r2r-management/.env
          echo "MEDIA_LOCATION=${{ vars.MEDIA_LOCATION }}" >> r2r-management/.env
          echo "STATIC_LOCATION=${{ vars.STATIC_LOCATION }}" >> r2r-management/.env
          

      # Logs in with your Azure credentials
      - name: Azure login
        uses: azure/login@v1.4.6
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Builds and pushes an image up to your Azure Container Registry
      - name: Build and push image to ACR
        run: |
          az acr build --image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.ENVIRONMENT }}/${{ env.CONTAINER_NAME }}:${{ github.sha }} --registry ${{ env.AZURE_CONTAINER_REGISTRY }} -g ${{ env.RESOURCE_GROUP }} -f r2r-management/Dockerfile r2r-management

  deploy:
    permissions:
      actions: read
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    environment: 'production'
    needs: [buildImage]
    steps:
      # Checks out the repository this file is in
      - uses: actions/checkout@v4

      # Logs in with your Azure credentials
      - name: Azure login
        uses: azure/login@v1.4.6
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Use kubelogin to configure your kubeconfig for Azure auth
      - name: Set up kubelogin for non-interactive login
        uses: azure/use-kubelogin@v1
        with:
          kubelogin-version: 'v0.0.25'

      # Retrieves your Azure Kubernetes Service cluster's kubeconfig file
      - name: Get K8s context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.RESOURCE_GROUP }}
          cluster-name: ${{ env.CLUSTER_NAME }}
          admin: 'false'
          use-kubelogin: 'true'

      # Deploys application based on given manifest file
      - name: Deploys application
        uses: Azure/k8s-deploy@v4
        with:
          action: deploy
          manifests: ${{ env.DEPLOYMENT_MANIFEST_PATH }}/${{ env.ENVIRONMENT }}
          images: |
            ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.ENVIRONMENT }}/${{ env.CONTAINER_NAME }}:${{ github.sha }}
          namespace: ${{ env.ENVIRONMENT }}

      - name: Wait for deployment to be ready
        run: |
          echo "Waiting for deployment to roll out..."
          kubectl rollout status deployment/r2r-web -n ${{ env.ENVIRONMENT }} --timeout=300s
